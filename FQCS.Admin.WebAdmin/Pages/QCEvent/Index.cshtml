@page
@model FQCS.Admin.WebAdmin.Pages.QCEvent.IndexModel
@{
    var apiUrl = WebAdmin.Settings.Instance.ApiUrl;
}

@section head {
    <!-- Select2 -->
    <link rel="stylesheet" href="/plugins/select2/css/select2.min.css">
    <link rel="stylesheet" href="/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css">
    <!-- DataTables -->
    <link rel="stylesheet" href="/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>@Model.Info.Title</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="@Constants.Routing.DASHBOARD">Dashboard</a></li>
                    <li class="breadcrumb-item active">@Model.Info.Title</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-12">
            <div class="card card-default collapsed collapsed-card">
                <div class="card-header clickable" data-card-widget="collapse">
                    <h3 class="card-title">
                        <i class="fa fa-terminal text-black-50 mr-1"></i>
                        Operation
                    </h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-plus"></i></button>
                    </div>
                </div>
                <!-- /.card-header -->
                <div class="card-body">
                    <form id="form-operation">
                        <div class="form-group w-50">
                            <label>Command</label>
                            <select class="form-control select2" name="command">
                                <option value="">Not selected</option>
                                <option value="@Business.Constants.QCEventOps.GET_EVENTS">Manual get new QC events</option>
                                <option value="@Business.Constants.QCEventOps.DOWNLOAD_IMAGES">Download images folder</option>
                                <option value="@Business.Constants.QCEventOps.UPDATE_STATUS">Update sent status of events</option>
                                <option value="@Business.Constants.QCEventOps.TRIGGER_SEND">Trigger sending new QC events</option>
                                <option value="@Business.Constants.QCEventOps.CLEAR_ALL">Clear all events</option>
                            </select>
                        </div>
                        <div class="form-group w-50">
                            <label>Destination device</label>
                            <select class="form-control select2" name="device_id">
                                <option value="">Not selected</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary float-right" onclick="confirmSendCommand()">
                        <i class="fa fa-terminal"></i> Send
                    </button>
                </div>
            </div>
            <!-- /.card -->

            <div class="card">
                <div class="card-header">

                </div>
                <!-- /.card-header -->
                <div class="card-body">
                    <table id="tbl-main" class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th></th>
                                <th>No</th>
                                <th>Id</th>
                                <th class="sortable">Time</th>
                                <th class="sortable">Defect type</th>
                                <th class="sortable">Batch</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th></th>
                                <th>No</th>
                                <th>Id</th>
                                <th class="sortable">Time</th>
                                <th class="sortable">Defect type</th>
                                <th class="sortable">Batch</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</section>
<!-- /.content -->

@section scripts {

    <!-- DataTables -->
    <script src="/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <!-- Select2 -->
    <script src="/plugins/select2/js/select2.full.min.js"></script>
    <!-- page script -->
    <script>
        let tblMain;
        $(function () {
            tblMain = $("#tbl-main").DataTable({
                serverSide: true,
                processing: true,
                responsive: true,
                autoWidth: false,
                searching: true,
                ordering: true,
                searchDelay: 500,
                ajax: {
                    url: '@apiUrl/@Business.Constants.ApiEndpoint.QC_EVENT_API',
                    data: function (d) {
                        d.count_total = true;
                        d.search = d.search?.value;
                        d.page = d.start / d.length + 1;
                        d.fields = '@QCEventQueryProjection.INFO,@QCEventQueryProjection.BATCH';
                        d.limit = d.length;
                        if (d.order?.length) {
                            const sorts = [];
                            for (var i = 0; i < d.order.length; i++) {
                                const ord = d.order[i];
                                const colName = d.columns[ord.column].name;
                                const dir = ord.dir[0];
                                sorts.push(dir + colName);
                            }
                            d.sorts = sorts.join(',');
                        }
                    },
                    dataFilter: function (jsonStr, type) {
                        let jsonData = JSON.parse(jsonStr);
                        console.log(jsonData);
                        let data = jsonData.data;
                        const list = data.list;
                        const dtData = {};
                        dtData.recordsTotal = data.count;
                        dtData.recordsFiltered = data.count;
                        dtData.data = list;
                        return JSON.stringify(dtData);
                    },
                    error: function (xhr, error, code) {
                        handleGeneralError(xhr);
                    }
                },
                columnDefs: [
                    {
                        targets: 0,
                        data: "id",
                        render: function (data, type, row, meta) {
                            var btn =
                                "<div class=\"dropdown\">" +
                                    "<button class=\"btn btn-primary dropdown-toggle btn-sm\"" +
                                        "type=\"button\" id=\"btn-dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">" +
                                        "<i class=\"fa fa-list\"></i>" +
                                    "</button>" +
                                    "<div class=\"dropdown-menu\" aria-labelledby=\"btn-dropdown\">" +
                                        "<a class=\"dropdown-item\" href=\"" + "@Constants.Routing.QC_EVENT_DETAIL".replace('{id}', data) + "\"><i class=\"fa fa-info-circle dropdown-item-icon\"></i>Detail</a>" +
                                    "</div>" +
                                "</div>";
                            return btn;
                        }
                    },
                    {
                        targets: 1,
                        render: function (data, type, row, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    { targets: 2, data: "id" },
                    {
                        targets: 3,
                        data: "created_time",
                        name: "time",
                        orderable: true,
                        render: function (data, type, row, meta) {
                            return data.display;
                        }
                    },
                    {
                        targets: 4,
                        data: "defect_type",
                        orderable: true,
                        render: function (data, type, row, meta) {
                            return data?.name;
                        }
                    },
                    {
                        targets: 5,
                        data: "batch",
                        orderable: true,
                        render: function (data, type, row, meta) {
                            return data.code;
                        }
                    },
                    { targets: "_all", orderable: false, defaultContent: '' },
                ],
                order: [[3, 'desc']]
            });
            getQCDevices();
            $('.select2').select2();
        });

        function getQCDevices() {
            changeLoading(true);
            const data = {};
            data.load_all = true;
            data.fields = '@ProductionLineQueryProjection.SELECT';
            $.ajax({
                url: '@apiUrl/@Business.Constants.ApiEndpoint.QC_DEVICE_API',
                type: 'get',
                data: data,
                success: (respData) => {
                    console.log(respData);
                    let data = respData.data.list;
                    let select = $('#form-operation [name=device_id]');
                    for (var i = 0; i < data.length; i++) {
                        select.append(
                            $('<option value="' + data[i].id + '">').append(data[i].code)
                        );
                    }
                },
                error: (data) => {
                    handleGeneralError(data);
                },
                complete: () => {
                    changeLoading(false);
                }
            });
        }

        function reloadTable() {
            tblMain.ajax.reload();
        }

        function confirmSendCommand() {
            confirmAlert().then((result) => {
                if (result.value)
                    sendCommand();
            });
        }

        function sendCommand() {
            const model = {};
            model.command = $('#form-operation [name=command]').val();
            model.device_id = $('#form-operation [name=device_id]').val();
            model.settings = {
                'test': true
            };
            let success = null;
            let func = null;
            switch (model.command) {
                case '@Business.Constants.QCEventOps.GET_EVENTS':
                    success = (respData) => {
                        successAlert("Success: " + respData.data.success +
                            ", fail: " + respData.data.fail).then(reloadTable);
                    }
                    func = sendGeneralCommand;
                    break;
                case '@Business.Constants.QCEventOps.DOWNLOAD_IMAGES':
                    success = (blob, status, xhr) => {
                        // check for a filename
                        var filename = "";
                        var disposition = xhr.getResponseHeader('Content-Disposition');
                        if (disposition && disposition.indexOf('attachment') !== -1) {
                            var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            var matches = filenameRegex.exec(disposition);
                            if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                        }

                        if (typeof window.navigator.msSaveBlob !== 'undefined') {
                            // IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."
                            window.navigator.msSaveBlob(blob, filename);
                        } else {
                            var URL = window.URL || window.webkitURL;
                            var downloadUrl = URL.createObjectURL(blob);

                            if (filename) {
                                // use HTML5 a[download] attribute to specify filename
                                var a = document.createElement("a");
                                // safari doesn't support this yet
                                if (typeof a.download === 'undefined') {
                                    window.location.href = downloadUrl;
                                } else {
                                    a.href = downloadUrl;
                                    a.download = filename;
                                    document.body.appendChild(a);
                                    a.click();
                                }
                            } else {
                                window.location.href = downloadUrl;
                            }
                            setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup
                        }
                    };
                    func = sendDownloadCommand;
                    break;
                case '@Business.Constants.QCEventOps.UPDATE_STATUS':
                    success = (respData) => {
                        successAlert("Success: " + respData.data);
                    }
                    func = sendGeneralCommand;
                    break;
                case '@Business.Constants.QCEventOps.TRIGGER_SEND':
                    success = (respData) => {
                        successAlert("Executed at: " + respData.data);
                    }
                    func = sendGeneralCommand;
                    break;
                case '@Business.Constants.QCEventOps.CLEAR_ALL':
                    success = (respData) => {
                        successAlert("Clear: " + respData.data);
                    }
                    func = sendGeneralCommand;
                    break;
                default:
                    success = (respData) => {
                        successAlert("Sent command successfully").then(reloadTable);
                    }
                    func = sendGeneralCommand;
                    break;
            }
            func(model, success);
        }

        function sendGeneralCommand(model, success) {
            changeLoading(true);
            $.ajax({
                url: '@apiUrl/@Business.Constants.ApiEndpoint.QC_DEVICE_API/cmd',
                type: 'post',
                contentType: 'application/json',
                data: JSON.stringify(model),
                success: success,
                error: (resp) => {
                    handleGeneralError(resp);
                },
                complete: () => {
                    changeLoading(false);
                }
            });
        }

        function sendDownloadCommand(model, success) {
            changeLoading(true);
            $.ajax({
                url: '@apiUrl/@Business.Constants.ApiEndpoint.QC_DEVICE_API/cmd',
                type: 'post',
                contentType: 'application/json',
                data: JSON.stringify(model),
                xhrFields: {
                    responseType: 'blob'
                },
                success: success,
                error: (resp) => {
                    handleGeneralError(resp);
                },
                complete: () => {
                    changeLoading(false);
                }
            });
        }

    </script>
}